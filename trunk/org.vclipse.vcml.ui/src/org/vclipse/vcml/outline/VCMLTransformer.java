/*******************************************************************************
 * Copyright (c) 2010 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    webXcerpt Software GmbH - initial creator
 *******************************************************************************/
/*
* generated by Xtext
*/
package org.vclipse.vcml.outline;

import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.preferences.InstanceScope;
import org.eclipse.core.runtime.preferences.IEclipsePreferences.IPreferenceChangeListener;
import org.eclipse.core.runtime.preferences.IEclipsePreferences.PreferenceChangeEvent;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.xtext.ui.common.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.common.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;
import org.eclipse.xtext.ui.core.ILocationInFileProvider;
import org.vclipse.vcml.IUiConstants;
import org.vclipse.vcml.VCMLUiPlugin;
import org.vclipse.vcml.vcml.BOMItem;
import org.vclipse.vcml.vcml.BillOfMaterial;
import org.vclipse.vcml.vcml.Characteristic;
import org.vclipse.vcml.vcml.CharacteristicOrValueDependencies;
import org.vclipse.vcml.vcml.Class;
import org.vclipse.vcml.vcml.ConfigurationProfile;
import org.vclipse.vcml.vcml.ConfigurationProfileEntry;
import org.vclipse.vcml.vcml.Constraint;
import org.vclipse.vcml.vcml.Dependency;
import org.vclipse.vcml.vcml.DependencyNet;
import org.vclipse.vcml.vcml.InterfaceDesign;
import org.vclipse.vcml.vcml.LocalPrecondition;
import org.vclipse.vcml.vcml.LocalSelectionCondition;
import org.vclipse.vcml.vcml.Material;
import org.vclipse.vcml.vcml.Precondition;
import org.vclipse.vcml.vcml.Procedure;
import org.vclipse.vcml.vcml.SelectionCondition;

import com.google.inject.Inject;

/**
 * customization of the default outline structure
 * 
 */
public class VCMLTransformer extends AbstractDeclarativeSemanticModelTransformer {
	
	/**
	 * 
	 */
	private boolean hierarchical;
	
	/**
	 * @param locationProvider
	 * @param labelProvider
	 */
	@Inject
	public VCMLTransformer(ILocationInFileProvider locationProvider, ILabelProvider labelProvider) {
		hierarchical = Platform.getPreferencesService().getBoolean(VCMLUiPlugin.ID, IUiConstants.SAP_HIERARCHY_ACTIVATED, false, null);
		new InstanceScope().getNode(VCMLUiPlugin.ID).addPreferenceChangeListener(new IPreferenceChangeListener() {
			public void preferenceChange(PreferenceChangeEvent event) {
				if(IUiConstants.SAP_HIERARCHY_ACTIVATED.equals(event.getKey())) {
					hierarchical = Platform.getPreferencesService().getBoolean(VCMLUiPlugin.ID, IUiConstants.SAP_HIERARCHY_ACTIVATED, false, null);
				}
			}
		});
	}
	
	/**
	 * @see org.eclipse.xtext.ui.common.editor.outline.transformer.DefaultSemanticModelTransformer#consumeSemanticNode(org.eclipse.emf.ecore.EObject)
	 */
	@Override
	public boolean consumeSemanticNode(EObject object) {
		if(hierarchical) {
			return object instanceof Material;
		}
		return super.consumeSemanticNode(object);
	}
	/**
	 * @see org.eclipse.xtext.ui.common.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer#createOutlineNode(org.eclipse.emf.ecore.EObject, org.eclipse.xtext.ui.common.editor.outline.ContentOutlineNode)
	 */
	@Override
	protected ContentOutlineNode createOutlineNode(EObject object, ContentOutlineNode outlineParentNode) {
		if (hierarchical) {
			if(object instanceof Material) { // Materials are the only top-level elements
				return createOutlineNode((Material)object, outlineParentNode);
			}
		}
		return super.createOutlineNode(object, outlineParentNode);
	}

	protected ContentOutlineNode createOutlineNode(BillOfMaterial object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		for(BOMItem bomItem : object.getItems()) {
			createOutlineNode(bomItem, outlineNode);
		}
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(BOMItem object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		if (!EcoreUtil.isAncestor(object.getMaterial(), object)) {
			createOutlineNode(object.getMaterial(), outlineNode);
		} else {
			ContentOutlineNode materialNode = super.createNode(object.getMaterial(), outlineNode);
			materialNode.setLabel(getText(object) + " [cyclic]");
		}
		createOutlineNode(object.getSelectionCondition(), outlineNode);
		for(ConfigurationProfileEntry entry : object.getEntries()) {
			createOutlineNode(entry, outlineNode);
		}
		return outlineNode;
	}

	protected ContentOutlineNode createOutlineNode(Characteristic object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		createOutlineNode(object.getDependencies(), outlineNode);
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(Class object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		for(Characteristic characteristic : object.getCharacteristics()) {
			createOutlineNode(characteristic, outlineNode);
		}
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(ConfigurationProfile object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		createOutlineNode(object.getUidesign(), outlineNode);
		for(DependencyNet dependencyNet : object.getDependencyNets()) {
			createOutlineNode(dependencyNet, outlineNode);
		}
		for(ConfigurationProfileEntry entry : object.getEntries()) {
			createOutlineNode(entry, outlineNode);
		}
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(ConfigurationProfileEntry object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		// no own outline node needed
		createOutlineNode(object.getDependency(), parentOutlineNode);
		return parentOutlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(Constraint object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(CharacteristicOrValueDependencies object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		createOutlineNode(object.getLocalPrecondition(), parentOutlineNode);
		createOutlineNode(object.getLocalSelectionCondition(), parentOutlineNode);
		for(Dependency dependency : object.getDependencies()) {
			createOutlineNode(dependency, parentOutlineNode);
		}
		return parentOutlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(Dependency object, ContentOutlineNode parentOutlineNode) {
		if (object instanceof Procedure) {
			return createOutlineNode((Procedure)object, parentOutlineNode);
		} else if (object instanceof SelectionCondition) {
			return createOutlineNode((SelectionCondition)object, parentOutlineNode);
		} else if (object instanceof Precondition) {
			return createOutlineNode((Precondition)object, parentOutlineNode);
		} else if (object instanceof Constraint) {
			return createOutlineNode((Constraint)object, parentOutlineNode);
		} else {
			return null;
		}
	}

	
	protected ContentOutlineNode createOutlineNode(DependencyNet object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		for(Constraint constraint : object.getConstraints()) {
			createOutlineNode(constraint, outlineNode);
		}
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(InterfaceDesign object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(Material object, ContentOutlineNode outlineParentNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, outlineParentNode);
		ContentOutlineNode outlineNode = super.createNode(object, outlineParentNode);
		for(ConfigurationProfile profile : object.getConfigurationprofiles()) {
			createOutlineNode(profile, outlineNode);
		}
		for(Class clazz : object.getClasses()) {
			createOutlineNode(clazz, outlineNode);
		}
		for(BillOfMaterial bom : object.getBillofmaterials()) {
			createOutlineNode(bom, outlineNode);
		}
		return outlineNode;
	}

	protected ContentOutlineNode createOutlineNode(Precondition object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		return outlineNode;
	}

	protected ContentOutlineNode createOutlineNode(LocalPrecondition object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		return outlineNode;
	}

	protected ContentOutlineNode createOutlineNode(Procedure object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		return outlineNode;
	}

	protected ContentOutlineNode createOutlineNode(SelectionCondition object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		return outlineNode;
	}
	
	protected ContentOutlineNode createOutlineNode(LocalSelectionCondition object, ContentOutlineNode parentOutlineNode) {
		if (object==null || object.eIsProxy()) return null;
		if (!hierarchical) return super.createOutlineNode(object, parentOutlineNode);
		ContentOutlineNode outlineNode = super.createNode(object, parentOutlineNode);
		return outlineNode;
	}
	
}
