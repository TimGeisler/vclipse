/*******************************************************************************
 * Copyright (c) 2010 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    webXcerpt Software GmbH - initial creator
 *******************************************************************************/
/*
 * generated by Xtext
 */
package org.vclipse.vcml;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.linking.ILinkingService;
import org.eclipse.xtext.linking.lazy.LazyURIEncoder;
import org.eclipse.xtext.parsetree.reconstr.ICrossReferenceSerializer;
import org.eclipse.xtext.parsetree.reconstr.SerializerUtil;
import org.eclipse.xtext.validation.CompositeEValidator;
import org.vclipse.vcml.conversion.VCMLValueConverter;
import org.vclipse.vcml.formatting.VCMLCrossReferenceSerializer;
import org.vclipse.vcml.formatting.VCMLSerializerUtil;
import org.vclipse.vcml.linking.VCMLLinker;
import org.vclipse.vcml.linking.VCMLLinkingService;
import org.vclipse.vcml.resource.VCMLURIEncoder;
import org.vclipse.vcml.scoping.VCMLScopeProvider;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used within the IDE.
 */
public class VCMLRuntimeModule extends org.vclipse.vcml.AbstractVCMLRuntimeModule {

	@Override
	 public void configure(Binder binder) {
		 super.configure(binder);
		 binder.bindConstant().annotatedWith(Names.named(CompositeEValidator.USE_EOBJECT_VALIDATOR)).to(false);
	 }

	
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return VCMLValueConverter.class;
	}

	@Override
	public Class<? extends ILinker> bindILinker() {
		return VCMLLinker.class;
	}

	@Override
	public Class<? extends ILinkingService> bindILinkingService() {
		return VCMLLinkingService.class;
	}

	public Class<? extends LazyURIEncoder> bindURIEncoder() {
		return VCMLURIEncoder.class;
	}

	@Override
	public Class<? extends ICrossReferenceSerializer> bindICrossReferenceSerializer() {
		return VCMLCrossReferenceSerializer.class;
	}
	
	@Override
	public Class<? extends org.eclipse.xtext.scoping.IScopeProvider> bindIScopeProvider() {
		return VCMLScopeProvider.class;
	}

	public Class<? extends SerializerUtil> bindSerializerUtil() {
		return VCMLSerializerUtil.class;
	}
}
